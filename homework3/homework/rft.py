"""
RFT (Reinforcement Fine-Tuning) training implementation.
Trains on Chain-of-Thought reasoning data generated by datagen.py
"""
import json
from pathlib import Path
from .base_llm import BaseLLM
from .sft import test_model, tokenize, data_collator


class RFTDataset:
    """Dataset that loads RFT data from JSON"""
    def __init__(self, tokenizer, json_path: str, format_fn):
        self.tokenizer = tokenizer
        self.format_fn = format_fn
        
        # Load RFT data
        with open(json_path, 'r') as f:
            self.data = json.load(f)
        
        print(f"Loaded {len(self.data)} RFT examples from {json_path}")
    
    def __len__(self):
        return len(self.data)
    
    def __getitem__(self, idx):
        # RFT data format: [question, answer, reasoning]
        question, answer, reasoning = self.data[idx]
        
        # Format: question -> reasoning (which includes <answer>...</answer>)
        formatted_data = self.format_fn(question, reasoning)
        return tokenize(self.tokenizer, **formatted_data)


def format_rft_example(question: str, reasoning: str) -> dict[str, str]:
    """
    Format RFT example. 
    The reasoning already contains the answer in <answer></answer> tags.
    """
    return {
        "question": question,
        "answer": reasoning  # Reasoning includes the full chain of thought + answer
    }


def load() -> BaseLLM:
    from peft import PeftModel

    model_name = "rft_model"
    model_path = Path(__file__).parent / model_name

    llm = BaseLLM()
    llm.model = PeftModel.from_pretrained(llm.model, model_path).to(llm.device)
    llm.model.eval()

    return llm


def train_model(
    output_dir: str = "homework/rft_model",
    rft_data_path: str = "data/rft.json",
    **kwargs,
):
    """
    Train RFT model using generated reasoning data.
    Reuses most of the SFT training code.
    """
    import torch
    from transformers import Trainer, TrainingArguments
    from peft import LoraConfig, get_peft_model, TaskType
    
    # Clear memory
    if torch.cuda.is_available():
        torch.cuda.empty_cache()
    elif torch.backends.mps.is_available():
        torch.mps.empty_cache()
    
    # Initialize base model
    print("Initializing BaseLLM...")
    llm = BaseLLM()
    
    # Create LoRA configuration
    # Slightly larger rank for better reasoning capacity
    print("Creating LoRA configuration...")
    lora_config = LoraConfig(
        r=16,  # Increased from 8 for better capacity with reasoning
        lora_alpha=32,
        target_modules="all-linear",
        lora_dropout=0.05,
        bias="none",
        task_type=TaskType.CAUSAL_LM,
    )
    
    # Convert model to LoRA
    print("Converting model to LoRA...")
    llm.model = get_peft_model(llm.model, lora_config)
    
    # Enable input gradients if using GPU with gradient checkpointing
    if torch.cuda.is_available():
        llm.model.enable_input_require_grads()
    
    # Print trainable parameters
    llm.model.print_trainable_parameters()
    
    # Load RFT training data
    print(f"Loading RFT training data from {rft_data_path}...")
    
    # Check if RFT data exists
    if not Path(rft_data_path).exists():
        print(f"ERROR: RFT data not found at {rft_data_path}")
        print("Please run data generation first:")
        print("  python -m homework.datagen")
        return
    
    tokenized_train = RFTDataset(llm.tokenizer, rft_data_path, format_rft_example)
    
    # Setup output directory
    output_path = Path(output_dir)
    output_path.mkdir(parents=True, exist_ok=True)
    
    # Training arguments
    print("Setting up training arguments...")
    training_args = TrainingArguments(
        output_dir=str(output_path),
        logging_dir=str(output_path / "logs"),
        report_to="tensorboard",
        num_train_epochs=5,
        per_device_train_batch_size=16,
        gradient_accumulation_steps=2,
        gradient_checkpointing=torch.cuda.is_available(),  # Only on CUDA
        learning_rate=3e-4,
        warmup_steps=50,
        weight_decay=0.01,
        logging_steps=10,
        save_strategy="epoch",
        save_total_limit=2,
        fp16=torch.cuda.is_available(),
        dataloader_num_workers=0,
        remove_unused_columns=False,
        max_grad_norm=1.0,
    )
    
    # Create trainer
    print("Creating trainer...")
    trainer = Trainer(
        model=llm.model,
        args=training_args,
        train_dataset=tokenized_train,
        data_collator=data_collator,
    )
    
    # Train the model
    print("Starting training...")
    trainer.train()
    
    # Save the final model
    print(f"\nSaving model to {output_path}...")
    trainer.save_model(str(output_path))
    
    print("Training complete!")
    
    # Test the model
    print("\nTesting trained RFT model...")
    test_rft_model(output_dir)


def test_rft_model(ckpt_path: str = "homework/rft_model"):
    """Test the RFT model"""
    from .data import Dataset, benchmark
    from peft import PeftModel
    
    testset = Dataset("valid")
    llm = BaseLLM()

    # Load the model with LoRA adapters
    llm.model = PeftModel.from_pretrained(llm.model, ckpt_path).to(llm.device)
    llm.model.eval()

    benchmark_result = benchmark(llm, testset, 100)
    print(f"{benchmark_result.accuracy=}  {benchmark_result.answer_rate=}")


if __name__ == "__main__":
    from fire import Fire

    Fire({
        "train": train_model,
        "test": test_rft_model,
        "load": load
    })